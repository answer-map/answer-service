// Code generated by MockGen. DO NOT EDIT.
// Source: .\service\answer.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/answer-map/answer-service/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAnswerService is a mock of AnswerService interface.
type MockAnswerService struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerServiceMockRecorder
}

// MockAnswerServiceMockRecorder is the mock recorder for MockAnswerService.
type MockAnswerServiceMockRecorder struct {
	mock *MockAnswerService
}

// NewMockAnswerService creates a new mock instance.
func NewMockAnswerService(ctrl *gomock.Controller) *MockAnswerService {
	mock := &MockAnswerService{ctrl: ctrl}
	mock.recorder = &MockAnswerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswerService) EXPECT() *MockAnswerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAnswerService) Create(ctx context.Context, req *model.CreateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAnswerServiceMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnswerService)(nil).Create), ctx, req)
}

// Delete mocks base method.
func (m *MockAnswerService) Delete(ctx context.Context, req *model.DeleteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAnswerServiceMockRecorder) Delete(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAnswerService)(nil).Delete), ctx, req)
}

// Get mocks base method.
func (m *MockAnswerService) Get(ctx context.Context, req *model.GetRequest) (*model.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*model.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAnswerServiceMockRecorder) Get(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAnswerService)(nil).Get), ctx, req)
}

// GetHistory mocks base method.
func (m *MockAnswerService) GetHistory(ctx context.Context, req *model.GetHistoryRequest) (*model.GetHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, req)
	ret0, _ := ret[0].(*model.GetHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockAnswerServiceMockRecorder) GetHistory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockAnswerService)(nil).GetHistory), ctx, req)
}

// Update mocks base method.
func (m *MockAnswerService) Update(ctx context.Context, req *model.UpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAnswerServiceMockRecorder) Update(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAnswerService)(nil).Update), ctx, req)
}
