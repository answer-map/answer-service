// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEvents)
	t.Run("AnswerMaps", testAnswerMaps)
}

func TestDelete(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsDelete)
	t.Run("AnswerMaps", testAnswerMapsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsQueryDeleteAll)
	t.Run("AnswerMaps", testAnswerMapsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsSliceDeleteAll)
	t.Run("AnswerMaps", testAnswerMapsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsExists)
	t.Run("AnswerMaps", testAnswerMapsExists)
}

func TestFind(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsFind)
	t.Run("AnswerMaps", testAnswerMapsFind)
}

func TestBind(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsBind)
	t.Run("AnswerMaps", testAnswerMapsBind)
}

func TestOne(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsOne)
	t.Run("AnswerMaps", testAnswerMapsOne)
}

func TestAll(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsAll)
	t.Run("AnswerMaps", testAnswerMapsAll)
}

func TestCount(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsCount)
	t.Run("AnswerMaps", testAnswerMapsCount)
}

func TestHooks(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsHooks)
	t.Run("AnswerMaps", testAnswerMapsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsInsert)
	t.Run("AnswerEvents", testAnswerEventsInsertWhitelist)
	t.Run("AnswerMaps", testAnswerMapsInsert)
	t.Run("AnswerMaps", testAnswerMapsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AnswerEventToAnswerMapUsingAnswerKeyAnswerMap", testAnswerEventToOneAnswerMapUsingAnswerKeyAnswerMap)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AnswerMapToAnswerKeyAnswerEvents", testAnswerMapToManyAnswerKeyAnswerEvents)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AnswerEventToAnswerMapUsingAnswerKeyAnswerEvents", testAnswerEventToOneSetOpAnswerMapUsingAnswerKeyAnswerMap)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AnswerMapToAnswerKeyAnswerEvents", testAnswerMapToManyAddOpAnswerKeyAnswerEvents)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsReload)
	t.Run("AnswerMaps", testAnswerMapsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsReloadAll)
	t.Run("AnswerMaps", testAnswerMapsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsSelect)
	t.Run("AnswerMaps", testAnswerMapsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsUpdate)
	t.Run("AnswerMaps", testAnswerMapsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AnswerEvents", testAnswerEventsSliceUpdateAll)
	t.Run("AnswerMaps", testAnswerMapsSliceUpdateAll)
}
